import os
import sys
import torch
import numpy as np
import random
import argparse
from tqdm import tqdm
import torch.nn as nn
import matplotlib.pyplot as plt

# ======== –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ ========
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from src.utils import MNIST
from src.model import FlexibleMLP

def parse_args():
    parser = argparse.ArgumentParser(description='Train model')
    parser.add_argument('--lr', type=float, default=0.001, help='Learning rate')
    parser.add_argument('--batch-size', type=int, default=16, help='Batch size')
    parser.add_argument('--max-epochs', type=int, default=60000, help='Maximum epochs')
    parser.add_argument('--save-dir', type=str, default='data/checkpoints/exp16', help='Save directory')
    parser.add_argument('--seed', type=int, default=228, help='Random seed')
    return parser.parse_args()

def main():
    args = parse_args()
    
    # ======== –§–∏–∫—Å–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ ========
    torch.manual_seed(args.seed)
    np.random.seed(args.seed)
    random.seed(args.seed)
    
    # ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ========
    DEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'
    SAMPLE_SIZE = 386
    
    os.makedirs(args.save_dir, exist_ok=True)
    
    # ======== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ========
    train_dataset, test_dataset, train_loader, test_loader = MNIST(
        batch_size=args.batch_size, sample_size=SAMPLE_SIZE
    )
    
    # ======== –ú–æ–¥–µ–ª—å ========
    model = FlexibleMLP(
        hidden_dim=8,
        num_hidden_layers=1,
        input_downsample=6
    ).to(DEVICE)
    
    # ======== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö ========
    num_params = sum(p.numel() for p in model.parameters())
    trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
    
    print(f"\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:")
    print(f"   Device: {DEVICE}")
    print(f"   Learning rate: {args.lr}")
    print(f"   Batch size: {args.batch_size}")
    print(f"   Sample size: {SAMPLE_SIZE}")
    print(f"   Max epochs: {args.max_epochs}")
    print(f"   Random seed: {args.seed}")
    print(f"\nüèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
    print(f"   Hidden dim: 8")
    print(f"   Hidden layers: 1")
    print(f"   Input downsample: 6")
    print(f"   Total parameters: {num_params:,}")
    print(f"   Trainable parameters: {trainable_params:,}")
    
    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr)
    criterion = nn.CrossEntropyLoss()
    
    # ======== –û–±—É—á–µ–Ω–∏–µ ========
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
    model.train()
    
    losses_per_epoch = []
    pbar = tqdm(range(args.max_epochs), desc="Training")
    
    for epoch in pbar:
        epoch_losses = []
        
        for images, labels in train_loader:
            images, labels = images.to(DEVICE), labels.to(DEVICE)
            
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            
            epoch_losses.append(loss.item())
        
        avg_loss = np.mean(epoch_losses)
        losses_per_epoch.append(avg_loss)
        pbar.set_postfix({'loss': f'{avg_loss:.6f}'})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∂–¥—ã–µ 1000 —ç–ø–æ—Ö
        if (epoch + 1) % 1000 == 0:
            plt.figure(figsize=(10, 6))
            plt.plot(losses_per_epoch)
            plt.title(f'Training Loss (lr={args.lr}, epoch {epoch+1})')
            plt.xlabel('Epoch')
            plt.ylabel('Loss')
            plt.grid(True)
            plot_path = os.path.join(args.save_dir, f'loss_progress_lr{args.lr}.png')
            plt.savefig(plot_path)
            plt.close()
    
    # ======== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ========
    model_path = os.path.join(args.save_dir, f"plateau_model_lr{args.lr}.pth")
    torch.save(model.state_dict(), model_path)
    
    # ======== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ========
    metadata = {
        'lr': args.lr,
        'batch_size': args.batch_size,
        'final_epoch': len(losses_per_epoch),
        'final_loss': losses_per_epoch[-1],
        'losses_per_epoch': losses_per_epoch,
        'config': {
            'hidden_dim': 8,
            'num_hidden_layers': 1,
            'input_downsample': 6,
            'sample_size': SAMPLE_SIZE
        }
    }
    
    metadata_path = os.path.join(args.save_dir, f"plateau_metadata_lr{args.lr}.npy")
    np.save(metadata_path, metadata)
    
    # ======== –§–∏–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ ========
    plt.figure(figsize=(12, 6))
    plt.plot(losses_per_epoch)
    plt.title(f'Final Training Loss (lr={args.lr})')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.grid(True)
    plot_path = os.path.join(args.save_dir, f'loss_progress_lr{args.lr}.png')
    plt.savefig(plot_path)
    plt.close()
    
    print(f"\nüíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
    print(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_path}")
    print(f"üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {plot_path}")

if __name__ == "__main__":
    main()
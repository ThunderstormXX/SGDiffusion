import os
import sys
import subprocess
import argparse
from datetime import datetime

def parse_args():
    parser = argparse.ArgumentParser(description='Run full exp16 cycle for multiple learning rates')
    parser.add_argument('--lrs', nargs='+', type=float, default=[1e-3, 1e-4, 1e-5], 
                       help='Learning rates to test')
    parser.add_argument('--batch-size', type=int, default=16, help='Batch size')
    parser.add_argument('--max-epochs', type=int, default=60000, help='Maximum epochs')
    parser.add_argument('--post-plateau-steps', type=int, default=500, help='Steps after plateau')
    parser.add_argument('--base-save-dir', type=str, default='data/checkpoints/exp16', 
                       help='Base save directory')
    parser.add_argument('--seed', type=int, default=228, help='Random seed')
    return parser.parse_args()

def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        if result.stdout:
            print("STDOUT:", result.stdout[-500:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
    else:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
        print("STDERR:", result.stderr)
        return False
    
    return True

def main():
    args = parse_args()
    
    print("=" * 60)
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ exp16")
    print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ Learning rates: {args.lrs}")
    print(f"üì¶ Batch size: {args.batch_size}")
    print("=" * 60)
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    for lr in args.lrs:
        print(f"\n{'='*40}")
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ learning rate: {lr}")
        print(f"{'='*40}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ lr
        save_dir = os.path.join(args.base_save_dir, f"lr_{lr}")
        os.makedirs(save_dir, exist_ok=True)
        
        # –®–∞–≥ 1: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        train_cmd = [
            'python', os.path.join(script_dir, 'exp16_train_to_plateau.py'),
            '--lr', str(lr),
            '--batch-size', str(args.batch_size),
            '--max-epochs', str(args.max_epochs),
            '--save-dir', save_dir,
            '--seed', str(args.seed)
        ]
        
        if not run_command(train_cmd, f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (lr={lr})"):
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º lr={lr} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏")
            continue
        
        # –®–∞–≥ 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        continue_cmd = [
            'python', os.path.join(script_dir, 'exp16_continue_and_log.py'),
            '--lr', str(lr),
            '--batch-size', str(args.batch_size),
            '--post-plateau-steps', str(args.post_plateau_steps),
            '--save-dir', save_dir,
            '--seed', str(args.seed)
        ]
        
        if not run_command(continue_cmd, f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è (lr={lr})"):
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è lr={lr}")
        
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ lr={lr}")
    
    print("\n" + "=" * 60)
    print("üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ exp16 –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.base_save_dir}")
    print("=" * 60)

if __name__ == "__main__":
    main()